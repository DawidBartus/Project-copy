{"mappings":"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","sources":["src/js/movie-details-modal.js","src/js/mainpage.js"],"sourcesContent":["const backdrop = document.getElementsByClassName('backdrop')[0];\nconst modal = document.getElementsByClassName('movie-details-modal')[0];\n\nconst showModal = () => {\n    backdrop.style.display = 'block';\n};\n\nconst closeModal = (e) => {\n    if (backdrop.style.display !== 'none' & e.target !== modal) {\n        backdrop.style.display = 'none'\n    }\n}\n\nexport { showModal, closeModal };","import { closeModal, showModal } from './movie-details-modal';\nconst filmsGalery = document.querySelector('.gallery__box');\nconst paginationList = document.querySelector('.pagination');\n\nconst APIKEY = 'cd99a2449e6daaffb205ea92bac682a0';\nlet page = 1;\nlet totalPages;\nlet link;\n\nconst { log } = console;\n\n// Fetch films from API\n\nconst fetchFilms = link => {\n  return fetch(link)\n    .then(res => {\n      return res.json();\n    })\n    .catch(error => log(error));\n};\n\n// Main function that loads tranding film on main page\nconst trendingFilms = () => {\n  link = `\n    https://api.themoviedb.org/3/trending/movie/week?api_key=${APIKEY}&page=${page}`;\n\n  fetchFilms(link).then(res => {\n    totalPages = res.total_pages;\n    let films = res.results;\n\n    createFilmsGalery(films);\n    createButtons(totalPages, page);\n  });\n};\n\n// call the function\ntrendingFilms();\n\n// This function creates elements in .gallery_box\n\nconst createFilmsGalery = elem => {\n  filmsGalery.innerHTML = '';\n  elem.map(async film => {\n    let name = film.title;\n    let poster = film.poster_path;\n    let filmId = film.id;\n    let releseDate = film.release_date.slice(0, 4) || 'Sorry. No relase date yet.';\n    let other;\n    let newGenres;\n    // Because i can't get the genres names from first fetch\n    // i created second fetch from API that uses film id to get films details and then i extract genres names from it\n    let genres = await getGenres(film.id);\n\n    if (genres.length > 2) {\n      newGenres = genres.slice(0, 2).join(', ');\n      other = ', Other';\n    } else if (genres.length <= 2 && genres.length > 1) {\n      newGenres = genres;\n      other = '';\n      if (genres.length === 2) {\n        newGenres = genres.join(', ');\n        other = '';\n      }\n    } else {\n      newGenres = 'Sorry. No genre added yet.';\n      other = '';\n    }\n\n    const galeryItem = `<figure class=\"card\" data-id=\"${filmId}\">\n<img class=\"card__image\" src=\"https://image.tmdb.org/t/p/w500${poster}\" alt=\"${name} movie poster\" />\n<figcaption class=\"card__caption\">\n  <p class=\"card__title\">${name}</p>\n  <p class=\"card__description\">${newGenres + other} | ${releseDate}</p>\n</figcaption>\n</figure>`;\n\n    filmsGalery.innerHTML = filmsGalery.innerHTML + galeryItem;\n  });\n};\n\n// function that uses film id from createFilmsGalery function.\n// This function creates details of tranding films but is used for creating genres names.\n// !!! Can be used for modal window after small changes !!!\nconst getGenres = async id => {\n  link = `https://api.themoviedb.org/3/movie/${id}?api_key=${APIKEY}`;\n  let gen;\n  await fetchFilms(link).then(res => {\n    gen = res.genres.map(ele => ele.name);\n  });\n\n  return gen;\n};\n\n// Pagination\n\nfunction createButtons(totalPages, page) {\n  let liTag = '';\n  let beforePage = page - 1;\n  let afterPage = page + 1;\n  let activeLi;\n  if (page > 1) {\n    liTag += `<button class=\"pagination__button--arrow-left\">\n    <svg class=\"pagination__icon--arrow-left\" style=\"pointer-events: none;\"><use href=\"/src/images/icons.svg#arrow\"\" style=\"pointer-events: none;\"></use></svg>\n  </button>`;\n  }\n  if (page > 2) {\n    liTag += `<button class=\"pagination__button\" type=\"button\" data-page=\"1\">1</button>`;\n    if (page > 3) {\n      liTag += `<span class=\"pagination__hidden-results\">&middot&middot&middot</span>`;\n    }\n  }\n\n  if (page === totalPages) {\n    beforePage = beforePage - 2;\n  } else if (page === totalPages - 1) {\n    beforePage = beforePage - 1;\n  }\n  if (page === 1) {\n    afterPage = afterPage + 2;\n  } else if (page === totalPages + 1) {\n    afterPage = afterPage + 1;\n  }\n\n  for (let pageLength = beforePage; pageLength <= afterPage; pageLength++) {\n    if (pageLength > totalPages) {\n      continue;\n    }\n    if (pageLength === 0) {\n      pageLength = pageLength + 1;\n    }\n    if (page == pageLength) {\n      activeLi = 'pagination__button--current';\n    } else {\n      activeLi = '';\n    }\n    liTag += `<button class=\"${activeLi} pagination__button\" type=\"button\" data-page=\"${pageLength}\">${pageLength}</button>`;\n  }\n  if (page < totalPages - 1) {\n    if (page < totalPages - 2) {\n      liTag += `<span class=\"pagination__hidden-results\">&middot&middot&middot</span>`;\n    }\n    liTag += `<button class=\"pagination__button\" type=\"button\" data-page=\"${totalPages}\">${totalPages}</button>`;\n  }\n\n  if (page < totalPages) {\n    liTag += `<button class=\"pagination__button--arrow-right\">\n    <svg class=\"pagination__icon--arrow-right\" style=\"pointer-events: none;\"><use href=\"/src/images/icons.svg#arrow\" style=\"pointer-events: none;\"></use></svg>\n  </button>`;\n  }\n\n  paginationList.innerHTML = liTag;\n}\n\nconst chceckBttn = e => {\n  const prev = document.querySelector('.pagination__button--arrow-left');\n  const next = document.querySelector('.pagination__button--arrow-right');\n\n  if (e.target === prev) {\n    page--;\n    trendingFilms();\n  }\n  if (e.target === next) {\n    page++;\n    trendingFilms();\n  }\n  if (e.target.type === 'button') {\n    page = Number(e.target.dataset.page);\n    trendingFilms();\n  }\n};\npaginationList.addEventListener('click', chceckBttn);\n\n// Operating the modal window\n\nconst filmCards = [...document.querySelectorAll('figure')];\nfilmCards.forEach(el => el.addEventListener('click', showModal));\n\nconst closeModalBtn = document.getElementsByClassName('movie-details-modal__close-btn')[0];\nwindow.addEventListener('click', closeModal);\ncloseModalBtn.addEventListener('click', closeModal);\n"],"names":["$93c1cfd4bb728ce3$var$backdrop","document","getElementsByClassName","$93c1cfd4bb728ce3$var$modal","$93c1cfd4bb728ce3$export$d7e8d4d4450c819c","style","display","$93c1cfd4bb728ce3$export$3f6fecd573f3fa48","e","target","$a9dd6ed579cc30ce$var$filmsGalery","querySelector","$a9dd6ed579cc30ce$var$paginationList","$a9dd6ed579cc30ce$var$APIKEY","$a9dd6ed579cc30ce$var$totalPages","$a9dd6ed579cc30ce$var$link","$a9dd6ed579cc30ce$var$page","log","$a9dd6ed579cc30ce$var$log","console","$a9dd6ed579cc30ce$var$fetchFilms","link","fetch","then","res","json","catch","error","$a9dd6ed579cc30ce$var$trendingFilms","total_pages","films","results","$a9dd6ed579cc30ce$var$createFilmsGalery","totalPages","page","activeLi","liTag","beforePage","afterPage","pageLength","innerHTML","$a9dd6ed579cc30ce$var$createButtons","elem","map","async","film","other","newGenres","name","title","poster","poster_path","filmId","id","releseDate","release_date","slice","genres","$a9dd6ed579cc30ce$var$getGenres","length","join","galeryItem","gen","ele","addEventListener","prev","next","type","Number","dataset","querySelectorAll","forEach","el","$a9dd6ed579cc30ce$var$closeModalBtn","window"],"version":3,"file":"index.510c23e0.js.map"}